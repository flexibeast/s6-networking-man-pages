.Dd January 29, 2021
.Dt S6-TLS 7
.Os
.Sh NAME
.Nm s6-tls
.Nd overview of the s6 TLS-related programs
.Sh DESCRIPTION
The
.Ql s6-tls*
programs are organized in a way that minimizes the amount of code, and
in particular that keeps the crypto code as encapsulated as possible.
.Pp
They are divided in two sets: client programs, which have
.Ql client
or
.Ql c
in their name, and server programs, which have
.Ql server
or
.Ql d
in their name.
The sets are symmetrical: the same functionality is available whether
you're interested in using a client or a server.
.Pp
Of course, they do not have to be used together.
You can run a TLS-enabled super-server via
.Xr s6-tlsserver 1
and it will work with any client speaking the correct TLS-enabled
protocol, not only
.Xr s6-tlsclient 1 .
.Ss The core TLS engine: s6-tlsc-io and s6-tlsd-io
.Xr s6-tlsc-io 1
and
.Xr s6-tlsd-io 1
are the only programs that actually perform TLS operations; the only
ones that are linked against the BearSSL or LibreSSL libraries.
.Pp
They:
.Bl -bullet -width x
.It
read TLS-related information (where to find my trust anchor list?
where to find my server certificate and private key?) from their
environment.
.It
assume that their stdin/stdout is talking to the network; they also
take two other fds on the command line that they assume are open and
talking to the local application - one for reading, one for writing.
.It
establish a TLS tunnel over the network.
.It
maintain full-duplex communication: what they read from the local
application is sent to stdout as ciphertext; what they read from stdin
is sent to the local application as cleartext.
.It
exit when they cannot transmit any more data.
.El
.Pp
Other programs in the
.Ql s6-tls*
set perform various operations such as Unix file descriptor plumbing
in order to provide a specific interface, but they always end up
spawning an
.Xr s6-tlsc-io 1
or
.Xr s6-tlsd-io 1
child that will handle the actual TLS management for them.
.Ss Regular TLSification of a service: s6-tlsc and s6-tlsd
The
.Xr s6-tlsc 1
and
.Xr s6-tlsd 1
programs are
.Dq immediate encryption Ns
-type programs.
They assume that the rest of their command line is a UCSPI client or
server application, i.e. reads from the network on fd (6 for clients,
0 for servers) and writes to the network on fd (7 for clients, 1 for
servers); their goal is to provide this application with transparent
encryption.
.Pp
They first spawn an
.Xr s6-tlsc-io 1
or
.Xr s6-tlsd-io 1
child to initialize the TLS connection.
.Pp
When the TLS handshake has completed, they exec into the rest of their
command line, interposing the
.Ql s6-tls[cd]-io
program in between this application and the network.
.Pp
The application still communicates via cleartext, but the data is
transparently encrypted before it goes to the network.
.Pp
The application is
.Em only
started after the handshake succeeds; the TLS tunnel stays up for the
whole lifetime of the application, or until the application closes the
fds it uses to communicate with (what it thinks is) the network.
.Ss Opportunistic TLS: s6-ucspitlsc and s6-ucspitlsd
The
.Xr s6-ucspitlsc 1
and
.Xr s6-ucspitlsd 1
programs are
.Dq delayed encryption Ns
-type programs.
They assume that the rest of their command line is an application that
follows the UCSPI-TLS[1] protocol.
This is a bit of a misnomer: the aim of this protocol is just to
provide an application with a means to ask for TLS encryption at any
time.
.Pp
They prepare the necessary communication channels, then fork.
The parent execs into the rest of its command line, with the
appropriate ucspi-tls environment variables set.
The child stays and waits for a command.
.Pp
When the
application sends a command to start TLS, the child execs into
.Xr s6-tlsc-io 1
or
.Xr s6-tlsd-io 1 ,
which initializes a TLS connection and performs a handshake.
.Pp
The application then communicates via the fds that have been provided
to it via the ucspi-tls protocol.
Those fds go through the TLS engine.
.Ss High-level client connections and super-servers: s6-tlsclient and s6-tlsserver
The
.Xr s6-tlsclient 1
and
.Xr s6-tlsserver 1
programs are high-level wrappers around TCP client and server
functionality, followed by the establishment of a TLS tunnel, followed
by the execution of an application.
.Pp
They're meant to provide simpler interfaces over long, complex command
lines.
.Pp
.Xr s6-tlsclient 1
rewrites itself into a command line involving
.Xr s6-tcpclient 1
and
.Xr s6-tlsc 1 .
.Pp
.Xr s6-tlsserver 1
rewrites itself into a command line involving (depending on the given options)
.Xr s6-tcpserver 1 ,
.Xr s6-tcpserver-access 1 ,
.Xr s6-tlsd 1 ,
and
.Xr s6-applyuidgid 1 .
.Sh SEE ALSO
.Xr s6-applyuidgid 1 ,
.Xr s6-tcpclient 1 ,
.Xr s6-tcpserver 1 ,
.Xr s6-tcpserver-access 1 ,
.Xr s6-tlsc 1 ,
.Xr s6-tlsc-io 1 ,
.Xr s6-tlsclient 1 ,
.Xr s6-tlsd 1 ,
.Xr s6-tlsd-io 1 ,
.Xr s6-tlsserver 1 ,
.Xr s6-ucspitlsc 1 ,
.Xr s6-ucspitlsd 1
.Pp
[1]
.Lk https://web.archive.org/web/20150311223933/http://www.suspectclass.com/sgifford/ucspi-tls/ucspi-tls.txt
.Pp
This man page is ported from the authoritative documentation at:
.Lk https://skarnet.org/software/s6-networking/tls-overview.html
.Sh AUTHORS
.An Laurent Bercot
.An Alexis Ao Mt flexibeast@gmail.com Ac (man page port)
