.Dd January 15, 2023
.Dt S6-UCSPITLSD 8
.Os
.Sh NAME
.Nm s6-ucspitlsd
.Nd server-side program that establishes
communication channels according to the UCSPI-TLS protocol,
then execs into an application
.Sh SYNOPSIS
.Nm
.Op Fl S | Fl s
.Op Fl Y | Fl y
.Op Fl Z | Fl z
.Op Fl v Ar verbosity
.Op Fl K Ar kimeout
.Op Fl k Ar snilevel
.Op --
.Ar prog...
.Sh DESCRIPTION
If the application sends a command, a TLS tunnel will be started and
the application will be able to use it instead of communicating with
the network via cleartext.
.Pp
The point of this protocol, and this program, is to make it easy to
implement commands like SMTP's STARTTLS without embedding a TLS stack
in the server itself.
.Pp
.Nm
expects to have an open TCP connection it can talk to on its stdin and
stdout.
.Pp
It forks and establishes communication channels between the parent and
the child.
The parent executes into
.Ar prog... ;
the child remains and waits for a command.
.Pp
At any time,
.Ar prog...
can send a command to its control socket provided by
.Nm ,
following the UCSPI-TLS[1] protocol.
Then the
.Nm
child will exec into an
.Xr s6-tlsd-io 8
process that will initialize the TLS connection, perform the handshake
(expecting a TLS client on the other side of the network) and maintain
a TLS tunnel.
.Ar prog
can use that TLS tunnel instead of talking directly to the network.
.Pp
It only makes sense to run
.Nm
if its application program
.Ar prog
knows and understands the UCSPI-TLS[1] protocol for opportunistic TLS.
If it does not, you will not be able to secure your connection, and
what you need is a regular immediate TLS program instead, which means
.Xr s6-tlsd 8 .
.Sh OPTIONS
.Bl -tag -width x
.It Fl v Ar verbosity
Be more or less verbose.
Default for
.Ar verbosity
is 1.
0 is quiet, 2 is verbose, more than 2 is debug output.
.It Fl Z
Do not clean the environment of the variables used by
.Xr s6-tlsc-io 8
before
.Xr exec 3 Ap
ing
.Ar prog... .
.It Fl z
Clean the environment of the variables used by
.Xr s6-tlsd-io 8
before
.Xr exec 3 Ap
ing
.Ar prog... .
This is the default.
.It Fl S
Send a
.Ql close_notify
alert and break the connection when
.Ar prog
sends EOF.
.It Fl s
Transmit EOF by half-closing the TCP connection without using
.Ql close_notify .
This is the default.
.It Fl Y
Request an optional client certificate.
.It Fl y
Request a mandatory client certificate.
The default, with neither the
.Fl Y
nor the
.Fl y
option, is not to request a client certificate at all.
.It Fl K Ar kimeout
Close the connection if the handshake takes more than
.Ar kimeout
milliseconds to complete.
The default is 0, which means infinite timeout: let the handshake
complete at its own pace, no matter how slow.
.It Fl k Ar snilevel
Support alternative certificate chains for SNI.
If
.Ar snilevel
is nonzero, private key file names are read from every environment
variable of the form
.Ev KEYFILE\&: Ns Ar x ,
where
.Ar x
is a server name that the client may require, and a corresponding
certificate chain for the name
.Ar x
should exist in the file named after the contents of the
.Ev CERTFILE\&: Ns Ar x
environment variable.
If
.Ar snilevel
is 2 or more,
.Em only
those files are read, and the generic
.Ev KEYFILE
and
.Ev CERTFILE
variables are ignored.
If
.Ar snilevel
is 0, or if the option is not given, which is the default,
.Ev KEYFILE
and
.Ev CERTFILE
are the only private key / certificate chain pair that are loaded, no
other environment variable is read for keypairs.
.El
.Sh ENVIRONMENT
.Ss Read
.Nm
does not expect to have any particular environment variables, but it
spawns a
.Xr s6-tlsd-io 8
program that does.
So it should pay attention to the following variables:
.Bl -bullet -width x
.It
.Ev CERTFILE
and
.Ev KEYFILE .
Also (or alternatively), if the
.Fl k
option is given: a series of
.Ev KEYFILE\&: Ns Ar x
and
.Ev CERTFILE\&: Ns Ar x
variables, for every
.Ar x
in the set of server names.
.It
(If the
.Fl Y
or
.Fl y
option has been given)
.Ev CADIR
or
.Ev CAFILE .
.It
.Ev TLS_UID
and
.Ev TLS_GID .
.El
.Ss Written
By default,
.Ar prog...
is run with all these variables
.Em unset :
.Ev CADIR ,
.Ev CAFILE ,
.Ev KEYFILE ,
.Ev CERTFILE ,
.Ev KEYFILE\&: Ns Ar x
and
.Ev CERTFILE\&: Ns Ar x
for every
.Ar x ,
.Ev TLS_UID
and
.Ev TLS_GID .
The variables are passed to the
.Xr s6-tlsd-io 8
child but not to
.Ar prog... .
The
.Fl Z
option prevents that behaviour and keeps them accessible in the child.
.Pp
However,
.Ar prog...
is run with the following additional environment variables, following
the UCSPI-TLS protocol:
.Bl -tag -width x
.It Ev SSLCTLFD
Contains the file descriptor number of the control socket.
.It Ev SSLREADFD
Contains the file descriptor number of the pipe used to read data from
the TLS tunnel after it has been activated.
.It Ev SSLWRITEFD
Contains the file descriptor number of the pipe used to write data to
the TLS tunnel after it has been activated.
.El
.Pp
Since
.Ar prog
is
.Xr exec 3 Ap
ed before the TLS handshake takes place, it cannot get information
about the TLS connection via environment variables.
However, if it starts the TLS connection via a
.Ql Y
command (as opposed to a
.Ql y
command), it will receive this information as a string sent over the
control socket.
.Sh EXIT STATUS
.Bl -tag -width x
.It 100
Wrong usage.
.It 111
System call failed.
.El
.Pp
Normally the parent
.Nm
process
.Xr exec 3 Ns
s into
.Ar prog...
and the child process execs into
.Xr s6-tlsd-io 8 .
If the parent dies or closes its control socket before sending a
command to start TLS, the child exits 0.
.Sh SEE ALSO
.Xr s6-tls 7 ,
.Xr s6-tlsc 8 ,
.Xr s6-tlsc-io 8 ,
.Xr s6-tlsclient 8 ,
.Xr s6-tlsd 8 ,
.Xr s6-tlsd-io 8 ,
.Xr s6-tlsserver 8 ,
.Xr s6-ucspitlsc 8
.Pp
[1]
.Lk https://web.archive.org/web/20150311223933/http://www.suspectclass.com/sgifford/ucspi-tls/ucspi-tls.txt
.Pp
This man page is ported from the authoritative documentation at:
.Lk https://skarnet.org/software/s6-networking/s6-ucspitlsd.html
.Sh AUTHORS
.An Laurent Bercot
.An Alexis Ao Mt flexibeast@gmail.com Ac (man page port)
