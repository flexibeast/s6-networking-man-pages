.Dd September 29, 2021
.Dt S6-TLSD 8
.Os
.Sh NAME
.Nm s6-tlsd
.Nd perform the server side of a TLS or SSL connection over an existing TCP connection, then exec into an application
.Sh SYNOPSIS
.Nm
.Op Fl S | Fl s
.Op Fl Y | Fl y
.Op Fl Z | Fl z
.Op Fl v Ar verbosity
.Op Fl K Ar kimeout
.Op Fl k Ar snilevel
.Op --
.Ar prog...
.Sh DESCRIPTION
.Nm
is meant to make network communications secure even for applications
that do not natively support TLS/SSL.
.Pp
s6-networking does not include cryptographic software.
All the crypto used in
.Nm
is provided by the chosen SSL backend: BearSSL[1] or LibreSSL[2], depending on
the options given when configuring s6-networking.
.Pp
.Nm
expects to have an open TCP connection it can talk to on its stdin
(for reading) and stdout (for writing).
.Pp
It spawns an
.Xr s6-tlsd-io 8
child process that will be the server-side of a TLS connection,
perform the handshake (expecting a TLS client on the other side of the
network) and maintain the TLS tunnel.
.Pp
When notified by
.Xr s6-tlsd-io 8
that the handshake has completed,
.Nm
.Xr exec 3 Ns
s into
.Ar prog... .
.Pp
The goal of the
.Nm
interface
.Po
and its client-side companion
.Xr s6-tlsc 8
.Pc
is to make it so that if you have a client, run by the command line
.Ql client...
that speaks a cleartext protocol to a server
run by the command line
.Ql server... ,
then if the server
has the proper private key and certificate, and the client has
the proper list of trust anchors, you can just change the
client command line to
.Ql s6-tlsc client...
and the server command line to
.Ql s6-tlsd server...
without changing the client or the server themselves, and the
communication between them will be secure.
.Sh OPTIONS
.Bl -tag -width x
.It Fl v Ar verbosity
Be more or less verbose.
Default for
.Ar verbosity
is 1.
0 is quiet, 2 is verbose, more than 2 is debug output.
This option currently has no effect.
.It Fl Z
Do not clean the environment of the variables used by
.Xr s6-tlsd-io 8
before
.Xr exec 3 Ap
ing
.Ar prog... .
.It Fl z
Clean the environment of the variables used by
.Xr s6-tlsd-io 8
before
.Xr exec 3 Ap
ing
.Ar prog... .
This is the default.
.It Fl S
Send a
.Ql close_notify
alert and break the connection when
.Ar prog
sends EOF.
.It Fl s
Transmit EOF by half-closing the TCP connection without using
.Ql close_notify .
This is the default.
.It Fl Y
Require an optional client certificate.
.It Fl y
Require a mandatory client certificate.
The default, with neither the
.Fl Y
nor the
.Fl y
option, is not to require a client certificate at all.
.It Fl K Ar kimeout
If the peer fails to send data for
.Ar kimeout
milliseconds during the handshake, close the connection.
The default is 0, which means infinite timeout (never kill the
connection).
.It Fl k Ar snilevel
Support alternative certificate chains for SNI.
If
.Ar snilevel
is nonzero, private key file names are read from every environment
variable of the form
.Ev KEYFILE\&: Ns Ar x ,
where
.Ar x
is a server name that the client may require, and a corresponding
certificate chain for the name
.Ar x
should exist in the file named after the contents of the
.Ev CERTFILE\&: Ns Ar x
environment variable.
If
.Ar snilevel
is 2 or more,
.Em only
those files are read, and the generic
.Ev KEYFILE
and
.Ev CERTFILE
variables are ignored.
If
.Ar snilevel
is 0, or if the option is not given, which is the default,
.Ev KEYFILE
and
.Ev CERTFILE
are the only private key / certificate chain pair that are loaded, no
other environment variable is read for keypairs.
.El
.Sh ENVIRONMENT
.Ss Read
.Nm
does not expect to have any particular environment variables, but it
spawns an
.Xr s6-tlsd-io 8
program that does.
So it should pay attention to the following variables:
.Bl -bullet -width x
.It
.Ev KEYFILE
and
.Ev CERTFILE .
Also (or alternatively), if the
.Fl k
option is given: a series of
.Ev KEYFILE\&: Ns Ar x
and
.Ev CERTFILE\&: Ns Ar x
variables, for every
.Ar x
in the set of server names.
.It
(If the
.Fl y
or
.Fl Y
option has been given)
.Ev CADIR
or
.Ev CAFILE .
.It
.Ev TLS_UID
and
.Ev TLS_GID .
.El
.Ss Written
By default,
.Ar prog...
is run with all these variables
.Em unset :
.Ev CADIR ,
.Ev CAFILE ,
.Ev KEYFILE ,
.Ev CERTFILE ,
.Ev KEYFILE\&: Ns Ar x
and
.Ev CERTFILE\&: Ns Ar x
for every
.Ar x ,
.Ev TLS_UID
and
.Ev TLS_GID .
They're passed to the
.Xr s6-tlsd-io 8
child but not to
.Ar prog... .
The
.Fl Z
option prevents that behaviour and keeps them accessible in the child.
.Pp
However,
.Ar prog...
is run with the following additional environment variables:
.Bl -tag -width x
.It Ev SSL_PROTOCOL
Contains the protocol version: TLSv1, TLSv1.1, TLSv1.2...
.It Ev SSL_CIPHER
Contains the name of the cipher used.
.It Ev SSL_TLS_SNI_SERVERNAME
Contains the required SNI server name, if any.
It is removed from the environment if no SNI has been sent by the
client.
.It Ev SSL_PEER_CERT_HASH
Contains the hash of the peer's End Entity certificate, prefixed by
the name of the hash and a colon
.Po
typically
.Ql SHA256\&:
.Pc .
.It Ev SSL_PEER_CERT_SUBJECT
Contains the decoded subjectDN of the peer's End Entity certificate,
i.e. identifying information.
What is traditionally called the
.Dq name
of the certificate is the CN field in that data.
.El
.Pp
More similar environment variables containing information about the
connection may be added in the future.
.Sh EXIT STATUS
.Bl -tag -width x
.It 100
Wrong usage.
.It 111
System call failed.
.El
.Pp
If everything goes smoothly,
.Nm
does not exit, but
.Xr exec 3 Ns
s into
.Ar prog...
instead.
.Sh SEE ALSO
.Xr s6-tls 7 ,
.Xr s6-tlsc 8 ,
.Xr s6-tlsc-io 8 ,
.Xr s6-tlsclient 8 ,
.Xr s6-tlsd-io 8 ,
.Xr s6-tlsserver 8 ,
.Xr s6-ucspitlsc 8 ,
.Xr s6-ucspitlsd 8
.Pp
[1]
.Lk https://bearssl.org/
.Pp
[2]
.Lk https://www.libressl.org/
.Pp
This man page is ported from the authoritative documentation at:
.Lk https://skarnet.org/software/s6-networking/s6-tlsd.html
.Sh AUTHORS
.An Laurent Bercot
.An Alexis Ao Mt flexibeast@gmail.com Ac (man page port)
